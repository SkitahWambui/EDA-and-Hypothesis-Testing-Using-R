{"metadata":{"kernelspec":{"name":"ir","display_name":"R","language":"R"},"language_info":{"name":"R","codemirror_mode":"r","pygments_lexer":"r","mimetype":"text/x-r-source","file_extension":".r","version":"4.0.5"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8389792,"sourceType":"datasetVersion","datasetId":4990228}],"dockerImageVersionId":30618,"isInternetEnabled":true,"language":"r","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"## EDA and Hypothesis Testing \n##### Goal of this project\n* EDA analysis\n* Find which variables affect the premium paid\n* Find which variables affect the claim paid\n* Use MLR to predict the premium and claim paid","metadata":{}},{"cell_type":"code","source":"# Import libraries\nlibrary(tidyverse) \nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(skimr)","metadata":{"_uuid":"051d70d956493feee0c6d64651c6a088724dca2a","_execution_state":"idle","_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-05-13T08:03:38.272547Z","iopub.execute_input":"2024-05-13T08:03:38.274558Z","iopub.status.idle":"2024-05-13T08:03:39.258029Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stderr","text":"── \u001b[1mAttaching core tidyverse packages\u001b[22m ──────────────────────── tidyverse 2.0.0 ──\n\u001b[32m✔\u001b[39m \u001b[34mdplyr    \u001b[39m 1.1.4     \u001b[32m✔\u001b[39m \u001b[34mreadr    \u001b[39m 2.1.4\n\u001b[32m✔\u001b[39m \u001b[34mforcats  \u001b[39m 1.0.0     \u001b[32m✔\u001b[39m \u001b[34mstringr  \u001b[39m 1.5.1\n\u001b[32m✔\u001b[39m \u001b[34mggplot2  \u001b[39m 3.4.4     \u001b[32m✔\u001b[39m \u001b[34mtibble   \u001b[39m 3.2.1\n\u001b[32m✔\u001b[39m \u001b[34mlubridate\u001b[39m 1.9.3     \u001b[32m✔\u001b[39m \u001b[34mtidyr    \u001b[39m 1.3.0\n\u001b[32m✔\u001b[39m \u001b[34mpurrr    \u001b[39m 1.0.2     \n── \u001b[1mConflicts\u001b[22m ────────────────────────────────────────── tidyverse_conflicts() ──\n\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mfilter()\u001b[39m masks \u001b[34mstats\u001b[39m::filter()\n\u001b[31m✖\u001b[39m \u001b[34mdplyr\u001b[39m::\u001b[32mlag()\u001b[39m    masks \u001b[34mstats\u001b[39m::lag()\n\u001b[36mℹ\u001b[39m Use the conflicted package (\u001b[3m\u001b[34m<http://conflicted.r-lib.org/>\u001b[39m\u001b[23m) to force all conflicts to become errors\n","output_type":"stream"}]},{"cell_type":"code","source":"#import the file\nvdf <- read.csv(\"/kaggle/input/cleaned-vehicle-insurance-dataset/clean_vehicle_insurance_dataset_d2.csv\",\n                colClasses = cols(\n                  INSR_BEGIN = col_date(format = \"%d-%b-%Y\"),\n                  INSR_END = col_date(format = \"%d-%b-%Y\"),\n                  INSURED_VALUE = col_double(),\n                  PREMIUM = col_double(),\n                  OBJECT_ID = col_integer(),\n                  PROD_YEAR = col_date(\"%Y\"),\n                  SEATS_NUM = col_integer(),\n                  CARRYING_CAPACITY = col_double(),\n                  TYPE_VEHICLE = col_character(),\n                  CCM_TON = col_double(),\n                  MAKE = col_character(),\n                  USAGE = col_character(),\n                  CLAIM_PAID = col_double(),\n                  CLAIM = col_character(),\n                  GENDER = col_character(),\n                  TYPE_INSR = col_character(),\n                  INSR_LENGTH = col_integer()\n                  )\n                )","metadata":{"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-05-13T08:06:12.587494Z","iopub.execute_input":"2024-05-13T08:06:12.589887Z","iopub.status.idle":"2024-05-13T08:06:17.363730Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stderr","text":"Warning message in read.table(file = file, header = header, sep = sep, quote = quote, :\n“not all columns named in 'colClasses' exist”\n","output_type":"stream"}]},{"cell_type":"code","source":"# create a copy of the dataset\ndf <- vdf","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:06:30.444661Z","iopub.execute_input":"2024-05-13T08:06:30.446306Z","iopub.status.idle":"2024-05-13T08:06:30.460862Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# denote factor variables\ndf$TYPE_VEHICLE <- factor(df$TYPE_VEHICLE)\ndf$MAKE <- factor(df$MAKE)\ndf$USAGE <- factor(df$USAGE)\ndf$CLAIM <- factor(df$CLAIM)\ndf$GENDER <- factor(df$GENDER)\ndf$TYPE_INSR <- factor(df$TYPE_INSR)","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:06:34.832103Z","iopub.execute_input":"2024-05-13T08:06:34.833779Z","iopub.status.idle":"2024-05-13T08:06:35.207602Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"# check on the dataset\nskim(df)\nsummary(df)","metadata":{"_kg_hide-output":true,"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Summary**\n* There are no missing values\n* The columns are assigned correct data types\n* There are 9 numeric variables\n* There are 6 categorical variables","metadata":{}},{"cell_type":"markdown","source":"### EDA\n#### 1. Distribution of Variables","metadata":{}},{"cell_type":"code","source":"# plot insurance types\ninsurance_type_plot <- df %>% \n  ggplot(mapping = aes(x=forcats::fct_infreq(TYPE_INSR), fill = TYPE_INSR)) +\n  geom_bar(show.legend = FALSE) +\n  geom_text(stat='count', aes(label=paste0(round(after_stat(prop*100), digits=1), \"%\"),group=1), vjust=-0.4,size=3) + \n  labs(x=\"\", y=\"\", title=\"Insurance Types\") ","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:06:59.018811Z","iopub.execute_input":"2024-05-13T08:06:59.020836Z","iopub.status.idle":"2024-05-13T08:06:59.057594Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# type of vehicle plot\ntype_of_car_plot <- df %>% \n  ggplot(mapping = aes(x=forcats::fct_infreq(TYPE_VEHICLE), fill=TYPE_VEHICLE)) +\n  geom_bar(show.legend = FALSE) +\n  geom_text(stat='count', aes(label=paste0(round(after_stat(prop*100), digits=1), \"%\"),group=1), vjust=-0.4,size=2) + \n  labs(x=\"\", y=\"\", title=\"Type of Car\")  +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:07:03.254148Z","iopub.execute_input":"2024-05-13T08:07:03.255903Z","iopub.status.idle":"2024-05-13T08:07:03.279314Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# usage plot\nusage_plot <- df %>% \n  ggplot(aes(x=forcats::fct_infreq(factor(USAGE)), fill=USAGE)) +\n  geom_bar(show.legend = FALSE) +\n  geom_text(stat='count', aes(label=paste0(round(after_stat(prop*100), digits=1), \"%\"),group=1), vjust=-0.4,size=2 ) + \n  labs(x=\"\", y=\"\", title=\"Distribution of Usages\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:07:08.528496Z","iopub.execute_input":"2024-05-13T08:07:08.530213Z","iopub.status.idle":"2024-05-13T08:07:08.553735Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"# plot gender\ngender_plot <- df %>% \n  ggplot(mapping = aes(x=forcats::fct_infreq(GENDER), fill = GENDER)) +\n  geom_bar(show.legend = FALSE) +\n  geom_text(stat='count', aes(label=paste0(round(after_stat(prop*100), digits=1), \"%\"),group=1), vjust=-0.4,size=3) + \n  labs(x=\"\", y=\"\", title=\"Gender\")","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:07:12.275326Z","iopub.execute_input":"2024-05-13T08:07:12.277119Z","iopub.status.idle":"2024-05-13T08:07:12.301479Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"# plot claim paid\nclaim_paid_plot <- df %>% \n  ggplot(mapping = aes(x=forcats::fct_infreq(CLAIM), fill = CLAIM)) +\n  geom_bar(show.legend = FALSE) +\n  geom_text(stat='count', aes(label=paste0(round(after_stat(prop*100), digits=1), \"%\"),group=1), vjust=-0.4,size=3) + \n  labs(x=\"\", y=\"\", title=\"Was Claim Paid?\") ","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:07:16.994789Z","iopub.execute_input":"2024-05-13T08:07:16.997157Z","iopub.status.idle":"2024-05-13T08:07:17.026223Z"},"trusted":true},"execution_count":12,"outputs":[]},{"cell_type":"code","source":"# Plot grid\nplotA <- cowplot::plot_grid(\n  insurance_type_plot, claim_paid_plot, gender_plot,\n  nrow = 3\n    )","metadata":{"execution":{"iopub.status.busy":"2024-05-13T09:39:51.922900Z","iopub.execute_input":"2024-05-13T09:39:51.924809Z","iopub.status.idle":"2024-05-13T09:39:56.473162Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stderr","text":"Warning message:\n“\u001b[1m\u001b[22mThe following aesthetics were dropped during statistical transformation: \u001b[32mfill\u001b[39m\n\u001b[36mℹ\u001b[39m This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\n\u001b[36mℹ\u001b[39m Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?”\nWarning message:\n“\u001b[1m\u001b[22mThe following aesthetics were dropped during statistical transformation: \u001b[32mfill\u001b[39m\n\u001b[36mℹ\u001b[39m This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\n\u001b[36mℹ\u001b[39m Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?”\nWarning message:\n“\u001b[1m\u001b[22mThe following aesthetics were dropped during statistical transformation: \u001b[32mfill\u001b[39m\n\u001b[36mℹ\u001b[39m This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\n\u001b[36mℹ\u001b[39m Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?”\n","output_type":"stream"}]},{"cell_type":"code","source":"plotB <- cowplot::plot_grid(\n  insurance_type_plot, claim_paid_plot, gender_plot,\n  nrow = 1\n    )","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Summary**\n*  Insurance Types: Commercial was the most popular insurance type, Trade Road Risk was the least popular\n* Type of car: The most insured type of vehicle was the motorcycle\n* Usage: Majority of the cars were used for private purposes\n* Gender: There were more men who were insured\n* 94.5% of the time claim was not paid","metadata":{}},{"cell_type":"markdown","source":"#### Distribution of Numerical Factors","metadata":{}},{"cell_type":"code","source":"# premium box plot \npremium_box <- df %>% \n  ggplot(aes(y=PREMIUM)) +\n  geom_boxplot(fill = \"#ff5733\", na.rm = TRUE) +\n  labs(x=\"Amount of Premiums\", y=\"\", title = \"Distribution of Premiums\") +\n  coord_flip() +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8))","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:07:46.735447Z","iopub.execute_input":"2024-05-13T08:07:46.737216Z","iopub.status.idle":"2024-05-13T08:07:46.759597Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"# premium histogram\npremium_hist <- df %>% \n  ggplot(aes(x=PREMIUM, na.rm = TRUE)) +\n  geom_histogram(binwidth = 50, fill = \"#ff5733\", na.rm = TRUE) +\n  labs(x=\"\", y=\"\", title=\"Dsitribution of Premiums\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8))","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:07:52.272810Z","iopub.execute_input":"2024-05-13T08:07:52.274515Z","iopub.status.idle":"2024-05-13T08:07:52.305532Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"code","source":"# number of seats histogram\nseats_hist <- df %>% \n  ggplot(aes(x=SEATS_NUM, na.rm = TRUE)) +\n  geom_histogram(binwidth = 5, fill = \"#ff5733\", na.rm = TRUE) +\n  labs(x=\"Number of Seats\", y=\"Number of Cars\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8))","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:08:00.837845Z","iopub.execute_input":"2024-05-13T08:08:00.839573Z","iopub.status.idle":"2024-05-13T08:08:00.858734Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"# boxplot of num_seats\nseats_boxplot = df %>% \n  ggplot(aes(x=SEATS_NUM, na.rm = TRUE)) +\n  geom_boxplot(fill=\"#ff5733\", na.rm = TRUE) +\n  labs(x=\"\", y=\"\", title = \"Distribution of Number of Seats\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8))","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:08:04.995029Z","iopub.execute_input":"2024-05-13T08:08:04.996844Z","iopub.status.idle":"2024-05-13T08:08:05.017941Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"# insured value histogram\ninsuredv_hist <- df %>% \n  ggplot(aes(x=INSURED_VALUE, na.rm = TRUE)) +\n  geom_histogram(binwidth = 8000, fill = \"#ff5733\") +\n  labs(x=\"Amount of Insured Value\", y = \"Number of Cars\", title = \"Distribution of Insured Value\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8))","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:08:09.509182Z","iopub.execute_input":"2024-05-13T08:08:09.511049Z","iopub.status.idle":"2024-05-13T08:08:09.533233Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"# insured value density\ninsuredv_density <- df %>% \n  ggplot(aes(x=INSURED_VALUE, na.rm = TRUE)) +\n  geom_density(alpha = 0.5, color = \"#ff5733\", fill = \"#ff5733\") +\n  labs(x=\"Amount of Insured Value\", y = \"Number of Cars\", title = \"Distribution of Insured Value\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8))","metadata":{"execution":{"iopub.status.busy":"2024-05-13T08:08:14.390549Z","iopub.execute_input":"2024-05-13T08:08:14.392404Z","iopub.status.idle":"2024-05-13T08:08:14.416388Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"# insured value boxplot\ninsuredv_box <- df %>% \n  ggplot(aes(x=INSURED_VALUE)) +\n  geom_boxplot(fill = \"#ff5733\", na.rm = TRUE) +\n  labs(x=\"Amount of Insured Value\", y = \"Number of Cars\", title = \"Distribution of Insured Value\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8))","metadata":{"execution":{"iopub.status.busy":"2024-05-12T09:36:56.105702Z","iopub.execute_input":"2024-05-12T09:36:56.107717Z","iopub.status.idle":"2024-05-12T09:36:56.130198Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"markdown","source":"#### Premium Vs Other Factors","metadata":{}},{"cell_type":"code","source":"#distribution of premiums by sex \npremiumBygender <- df %>% \n  ggplot(aes(x=forcats::fct_reorder(GENDER,PREMIUM, .fun=median, .desc=TRUE), y=PREMIUM, fill = GENDER)) +\n  geom_boxplot(show.legend = TRUE) +\n  labs(x=\"Gender\", y = \"Premium\", title = \"Distribution of Insured Value\")","metadata":{"execution":{"iopub.status.busy":"2024-05-12T09:42:46.421862Z","iopub.execute_input":"2024-05-12T09:42:46.423521Z","iopub.status.idle":"2024-05-12T09:42:46.441252Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"#distribution of premiums by sex \npremiumByGenderViolin <- df %>% \n  ggplot(aes(x=forcats::fct_reorder(GENDER,PREMIUM, .fun=median, .desc=TRUE), y=PREMIUM, fill = GENDER)) +\n  geom_violin(show.legend = FALSE) +\n  geom_boxplot(show.legend = TRUE) +\n  labs(x=\"Gender\", y = \"Premium\", title = \"Distribution of Insured Value\") +\n  coord_flip() \npremiumByGenderViolin","metadata":{"execution":{"iopub.status.busy":"2024-05-13T09:32:52.303640Z","iopub.execute_input":"2024-05-13T09:32:52.306403Z","iopub.status.idle":"2024-05-13T09:32:55.464160Z"},"trusted":true},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"image/png":"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\nZeHKPiJfbp3/q8jhNZ76ahd3ia0t65CHWzve3rzq3gWBm/+5YY6IHH/f0dUbXHbi1bklkf+8\n8ctDEw6o2li8akGc/VepcdTxHCAAoB6cim0u/np+wgsbS+ye3k8f167OBsEtr+Xk5PQ/+Jqq\nLVZ3q+POvuGxnFRN02bH/Z29K29PqnGBlPrIFXNF5Mjre1ffWrp5px2t//Ku3dqL1dV1YpYn\nWvbP5J82V98eLVt+zcJtisVxbY89v/NYo3Yep/g/pj15JxX75B4psfCWGxds2fkJ9fIBXbOz\ns2duL/e3+0+a3VK48obZ23fqP//vu+YUheI8Cou91cOHtta06KR3/5r86xars80D++8YKtNi\nRe9sCdqcHaqnOhEpXt7w5ZgNHHUcBxjnIQBAy0SwM15o2z8v3nz24IvfFZFzXvm01S7Ol7lS\njytcnfd/Pz9288wdVzJtW/TJLXlFimKbWO0KOS22J9chrfrwzMuf+14/MaZGC569euhDywvd\nmcMfr5yIoF9btuDiWzdX3gKhYPFHJ53zWe2u6i9g2qMnicjjJ4z+bEnFFW/R0typI49aF4q2\nH/70gf6ad7LaLY3aeTzi+Zjifydrm/jSv0XkwWOOfevnjfoWLRZ49bphT/yVG0oaPzrdZXW2\nnzGhmxYrG3/oxPnrSiv6X/L56KPu2K0DGfbgKBGZd8Xo9aFY60MeSqt2Hlax+ju7rLHw2hcX\nFVRt/OW9h44Z+4mIxMrqXkk4zqNu8AB36ygAoMUxelpuy6K/552696zSuV2W3aKIiGJxnnHf\n1zXa11goZP5tx+k9tOo24Ohjhg3u382iKCJyzJT/6Q1ikW366rLHn3L6+Zd/pVWumjHk5eX1\ndHt5G5/N2eHQVm4Rcaa0HTy4b7LDKiI2V6cZiwuqXhUqmtvJZRMRV0bvE8eOO+rAvm6L4vD1\n7+e1Vy1XUbuA2rvTNPWhM/uJiKJY2/UYdMTg3j6bRUSSu41eEtxpgeJDn15S4w3p7bFbHdn1\nvscNd76Xy500WFWDH1M872SdH5zuw0kVs1M79T9w2FGHdc1wiYgzeb/PNpXqDaLlq8b3TNHf\nhLbd9xvQrbWiKM6UAx89N0fiWO6k8l0q7lZ5hd8Fv2yu8ey8m4eKiMXqPfy4k8aPGT6ge5bF\n6psweYqIWB3Z515yWTCm1ljuJJ6jjvMAAQC7QrBrUrWDtcXuye6QM/rca2b+sbV2+9r3bJj7\n+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\nosXCmhrT1B0THRSL3WJzKVZ7eUHeuu/v3Cc782QP1KKhWKRUi5ar0ZCmRjU1qqkx0WL63jU1\nKlpMU1VNjYpo+2CnOwsGg/u8TwAmU1hY6HTGddlJnVjpyfRaarAT6TFxSP5Vz5epB7otSsmG\nN9aprR/o4Hu58tlWx4+7YtjIA5IdItKu9fjnZt2eG4pmORxVLy/fPvP95UV3vnFNX69dRLp2\n7xtbcOZbTy06bvpgvcHKlSunTJlS1f6+++7r2LHj3pdtt9v1B0Urv9773po5NVpWtPIro6sA\ngObF79+TcxS6SCSyDytBM9Ryg52vzRkdLR+9vKr4ki7Jy1/5MX3gxc5qMydGjTnh7wXzPliz\nfvPmTXlLfqn98pJ1CzVNu2HCKdU3eqPrRQY3eukiIpLcdViNEbtwYEPT7LrJWGxuf8fDjK5C\nREQ0tWLIUItqqqppMVFjmqaKyI5xRDWmiSoiWkzfompqrOFutZ3+etZiO/0/V9Niomk7flLr\nWJxFi0Xq3A4AaIFabrATxXbeQZmPvvj3JdMPfGHhtsMe2nHpvRrZdselly/39j7+sIF9Bvc8\ndtTQa66seWW6zetQrN6333xppy4t9qrHgwYN0hdX08Vise3bt+991eFwWH/Q4di7FGXH9Vjr\nvpuev2Tm3vffrNjcKZkDzggVrYuVFcRCAVXdEXqsdo/dn+3N6utI7rBvdqapZdtXlG1ZXF64\nKhLYGAluV8OBWDioRoKxcIlonLwA0CwoirKX3ybp6Q2s94mE1oKDnUjOmUfnX/bCxjXLN0ib\nM9vtGNkuWffCb1vCMz6YlmJVRCRU9F3t13qyjhf15y/yY2Pa6Je0ay9Om1J4+JXXHN9Wb2C1\nWpOSkqraFxcXx2INjd/EQdP2/aVdzVY4sPGfD/5VfxtPq96tD77S1/aAPdtFLBQoyvu2OO/7\nkg2/quHSPevEYrHoMxssFos+SdblcuknzW02mz4Bon4Oh8NR7US/7Hyqxe/3WyyW6v9+qibh\n6l588cU9qxxAwpk4cWKL+iLA7mrRwc6TdWqO/Z3bH5idOeh6R7UF7Oz+HE2b++Gcv0f0y8pf\ns+i9F18VkTUbCw/yt6qaPeHwH3DBwPQZk+9wXXRqz7a+P2a/+PGS7bdMbmXAYbQAPp/P5/NV\npaVIJBIIBAoKClRVDW5ZnPvxJdkHX1n/zcRqi5UXbf71ufwlH6nR8qqNVt7UnoIAACAASURB\n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\nFxc7HI7S0tJAIJCWlqZ/ak6n0+12BwIBvU5VVfXfo1gslp+f7/V6VVXV35/i4uKkpKSSkhKP\nxyMiSUn1XUAMVNm9byO7v9PICRc2i5WVK7lSjr550jHVt1jtmUYVg4TjtFhO79BmfPvs3wuK\n524vWJhflFcajGqaiITD4fXr169fvz6efux2u8vl8nq9VYHP4/F4vd7qKVBv4PV6XS6X0+nU\nN+rffM1fMBg866yzqt/PA0ATs9ls7777buLeHVH/y0TPymg8uxfs8tflbi2N1N7eo4dhi/JZ\n7Jl7uiCZGtMsVu4vBRGLouyflrx/WrKIhFV1bbB8Y3loU3l5fiiyLRwuCkeKo7FAJFocjQYi\nkbBax31W9GEkfXnk3WKz2fQUqI/ieDwefQRIT4r6aI3T6bTb7Xr76o/1YR6pHH7QN3q93qrb\npun/G63jeC2W6t8NLperqs86FRcXn3baadxgBjBWNBodO3bszJkz6/y9bv4mT548efJko6sw\nv3iDXfm2r045/LTPltU91aUZ/h9fi+a///yzc35ftr4g3KZr/zHnXDSsZ6r+1Dknjzn25st/\nfejpvKJYclbXM6+b1nXdBw/O+HJzmaXLwCNvnnxBklUJFy194YkZ8/9aWRxWM9p0O37C5eMO\naxf/LpC4HBZLV5+nq8+zqwZhVQ1GY6WxWCASLYupwVisLBYrjUZLorGQqpZEosGYWhqNBqLR\n0qgajMVKo7HSaDQYi9XZWzQaDQQCe5AIG0NVwvN4PHo61McU165d2wx/x4GW6eyzz37nnXeM\nrgLNV7zB7tnRZ3++IjDykinD+3eyNadRLjWydcmSJdW3dO/Zy6rIq1Ov/qKsz0UXXtM+SVk6\n/9PHplwce/Ll49pUfFt/dNeHF0y6Y0CWZdaDtz815Yq0/kdOuu1BZdvvN9/x7P3zTpo+pPWM\nSbfN8w+5atp5aY7You9fev7+a48Y/GbWziv51b+LlStXPvfcc1WNTz/99F69eu398VaduVsW\nKJ3297I626wJlu/9jhLRsyvXJNuby7VufpvNv3MtEU1TNS2qaTFNi2qaqklM06KqGtNEFS2m\najHRVE2iqqqKxDRN0yQmmqZJTNNERNU0VSrSVVRtlJxVXl6uXz/UTIImgNqKi4v35obXsV38\nkQnTiPdb8I5ftnY57YOPnxzVqNXsgfLCbyZP/qb6lhkfznQXznp/edGdb1zT12sXka7d+8YW\nnPnWU4uOmz5Yb9P1ghuGH9BWRMb/u/tnk3+7Zeo5HZ1W6dTm5IxX5ywqkiGtWx0/7ophIw9I\ndohIu9bjn5t1e24omlXtyoDy7TPr30V+fv5XX31V1f64447bt4Pn20Lhb7Zs34cdmsBvBbta\nrhIAzGNvvk30OSUwsbiCnRYLbI3E+p3Wv7Gr2QOezNPeeuHMGhu3rVuoadoNE06pvtEbXS9S\nkbpSelVML7J57RZ7ZsfKVZeTrBbRNBEZNeaEvxfM+2DN+s2bN+Ut+aX2fksa2kVaWtoxx+yY\n1ZGWlhYKhfb4MKtUjdhlOB39k+v+o21NsPyfktK931fC2T81ufmM2NVWNUoX0VRV02L6iJ2m\nqTvG8Co2apoW1TRNRJ/GoY/eVTyoHLSL1HWpH4CWYG++TWKxWP3X1CLRxfUtqFh9R6a4cl/+\nVUZ3auR69o3/b+++46uo0j+OP3N7bnLTaaElIXQQULEirIVFFEH9iYoFUREVwVVAEF0URQUb\nFkRFBQVUimtfFRcXywKKuyIqLVKlSU0vt8/vj4EQAgmQNrknn/fLl07Onbnz5OQK35yZOccW\n7dCs0QvmvVm6UbOU91EuOydtOLD/seEjfo/u0Ofcrh27t+vdv9eoux892VO0atVqypQpJV/m\n5eVVy+Wtknve23qiJ3U+9jMr7/yxa+PG+hjshrVq0amcsFuNwiIFgWBhKFQQCHrD4cJgsCgU\nLggEi8PhomCoOBQqCBq33B282e7gLXeBYN0PYsYcJXLk0xUej2fbtm3V8msJgKqLjY2t4t8m\nxvwptW/Tpk0HDhyIj49v06aNKQXUEyc4vKHN/+ekUy+8YcikwidHXd8ouu4OihjcjfpI+MdF\nWaHLU6JFRESfNeH+nB53j+rT9EQOL9gx86e9/tkfTIi3aiLiy/2m2k+BOiuo6zuLvDuKvXu9\nvix/4IDfn+MP5gaDef5AQTBYEAyV9xhEpXk8HofDYbfbPR6P3W43ZkKxWCzGQ6/GM7PhcLjk\n4ktUVJQxcGuxWIy5tUTEmCzN2DbCWUl7eVdtSp6QMGqooMK8vLyrr766at8lgOoxd+5cs0uo\npHfffXfJkiXdu3d/6qmnzK5FZSca0a66/+NGTeyzHxoy5+FbExs3jjpympDt27fXQG2V5/Cc\nPrRr0uxxj7mGXdWuacyqxbM+XXfg4XENT/Bwu6e1ri/78LvfLu3cKGvbmn/Mmisi2/7MOdPT\n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"},"metadata":{"image/png":{"width":420,"height":420}}}]},{"cell_type":"code","source":"# box plot premium vs insurance type\npremiumByInsrType <- df %>% \n  ggplot(aes(x=forcats::fct_reorder(TYPE_INSR, PREMIUM, .fun=median, .desc=TRUE), \n             y=PREMIUM, \n             fill = TYPE_INSR)) +\n  geom_boxplot(show.legend = FALSE, na.rm = TRUE) +\n  labs(x=\"Amount of Claim Paid\", y = \"Number of Cars\", title = \"Distribution of Claims Paid\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8),\n        panel.grid = element_blank()) ","metadata":{"execution":{"iopub.status.busy":"2024-05-12T09:43:44.349219Z","iopub.execute_input":"2024-05-12T09:43:44.351308Z","iopub.status.idle":"2024-05-12T09:43:44.374088Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"# box plot premiums vs type of vehicle\npremiumByVehicleType <- df %>% \n  ggplot(aes(x=forcats::fct_reorder(TYPE_VEHICLE, PREMIUM, .fun=median, .desc=TRUE), \n             y=PREMIUM, \n             fill = TYPE_VEHICLE)) +\n  geom_boxplot(show.legend = FALSE, na.rm = TRUE) +\n  labs(x=\"Type of vehicle\", y = \"Amount of premium\", title = \"Distribution of premiums by vehicle type\") +\n  coord_flip() +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8),\n        panel.grid = element_blank()) ","metadata":{"execution":{"iopub.status.busy":"2024-05-12T09:45:36.116859Z","iopub.execute_input":"2024-05-12T09:45:36.118700Z","iopub.status.idle":"2024-05-12T09:45:36.140718Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"# premium by usage\npremiumByUsage <- df %>% \n  ggplot(aes(x=forcats::fct_reorder(USAGE, PREMIUM, .fun=median, .desc=TRUE), y=PREMIUM)) +\n  geom_boxplot(show.legend = FALSE, fill = \"#ff5733\", na.rm = TRUE) +\n  labs(x=\"Car Usage\", y = \"Amount of premium\", title = \"Distribution of premiums by usage\") +\n  coord_flip() +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8),\n        panel.grid = element_blank())","metadata":{"execution":{"iopub.status.busy":"2024-05-12T09:47:10.435483Z","iopub.execute_input":"2024-05-12T09:47:10.437561Z","iopub.status.idle":"2024-05-12T09:47:10.460367Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"#premium by number of seats\n# HAS ERROR\npremiumBySeats <- df %>% \n  ggplot(aes(x=SEATS_NUM, y=PREMIUM)) +\n  geom_boxplot(show.legend = FALSE) +\n  labs(x=\"Number of seats\", y = \"Amount of premium\", title = \"Distribution of premiums by number of seats\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8),\n        panel.grid = element_blank())\npremiumBySeats","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"#### Claim Paid Vs Other Factors","metadata":{}},{"cell_type":"code","source":"# distribution of claim vs sex\nclaimByGender <- df %>% \n  filter(CLAIM == \"YES\") %>%\n  ggplot(aes(x=forcats::fct_reorder(GENDER,CLAIM_PAID, .fun=median, .desc=TRUE), y=CLAIM_PAID, fill = GENDER)) +\n  geom_boxplot(show.legend = TRUE) +\n  labs(x=\"Gender\", y = \"Claim Paid\", title = \"Distribution of Claim Paid\")\nclaimByGender","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# box plot claim paid vs insurance type\nclaimByInsrType <- df %>% \n  filter(CLAIM == \"YES\") %>%\n  ggplot(aes(x=forcats::fct_reorder(TYPE_INSR, CLAIM_PAID, .fun=median, .desc=TRUE), \n             y=CLAIM_PAID, \n             fill = TYPE_INSR)) +\n  geom_boxplot(show.legend = FALSE, na.rm = TRUE) +\n  labs(x=\"Amount of Claim Paid\", y = \"Number of Cars\", title = \"Distribution of Claims Paid\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8),\n        panel.grid = element_blank()) \nclaimByInsrType","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# box plot claim paid vs type of vehicle\nclaimByTypeVehicle <- df %>% \n  filter(CLAIM == \"YES\") %>%\n  ggplot(aes(x=forcats::fct_reorder(TYPE_VEHICLE, CLAIM_PAID, .fun=median, .desc=TRUE), \n             y=CLAIM_PAID, \n             fill = TYPE_VEHICLE)) +\n  geom_boxplot(show.legend = FALSE, na.rm = TRUE) +\n  labs(x=\"Amount of Claim Paid\", y = \"Number of Cars\", title = \"Distribution of Claims Paid\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8),\n        panel.grid = element_blank()) \nclaimByTypeVehicle","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# box plot claim paid vs usage\nclaimByUsage <- df %>% \n  filter(CLAIM == \"YES\") %>%\n  ggplot(aes(x=forcats::fct_reorder(USAGE, CLAIM_PAID, .fun=median, .desc=TRUE), \n             y=CLAIM_PAID, \n             fill = USAGE)) +\n  geom_boxplot(show.legend = FALSE, na.rm = TRUE) +\n  labs(x=\"Amount of Claim Paid\", y = \"Number of Cars\", title = \"Distribution of Claims Paid\") +\n  theme(plot.title = element_text(size=10),\n        axis.text = element_text(size=8),\n        axis.title = element_text(size=8),\n        panel.grid = element_blank()) \nclaimByUsage","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}